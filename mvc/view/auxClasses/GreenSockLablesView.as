package mvc.view{//import com.greensock.*;//import com.greensock.easing.*////import flash.display.*;//import flash.events.*;     import com.greensock.loading.*;    import com.greensock.events.*;    import flash.display.MovieClip;	import com.greensock.*;	import com.greensock.plugins.*;	import flash.events.Event;	import flash.events.MouseEvent;	import fl.controls.Button;    import flash.text.TextField;    import mvc.model.Model;    import mvc.controller.Controller;public class GreenSockLablesView extends MovieClip{		private var _model:Model;		private var _controller:Controller;          private var loader:SWFLoader;        public var tl:TimelineMax;         private var TheClass:Class;		//stage instances		public var color_mc:MovieClip;		public var align_mc:MovieClip;		public var transform_mc:MovieClip;		public var library_mc:MovieClip;		public var section_txt:TextField;		//butons		public var color_btn:Button;		public var align_btn:Button;		public var transform_btn:Button;		public var library_btn:Button;		public var next_btn:Button;		//positioning		public var endX:int = 10;		public var endY:int = 10;		public function GreenSockLablesView(model:Model, controller:Controller){			_model = model;			_controller = controller;            init();		}			    private function init(e:Event = null):void {			initModelEventListeners();            creation();            TweenPlugin.activate([ScrollRectPlugin]);			removeEventListener(Event.ADDED_TO_STAGE, init);			color_btn.addEventListener(MouseEvent.CLICK, navClickHandler);			align_btn.addEventListener(MouseEvent.CLICK, navClickHandler);			transform_btn.addEventListener(MouseEvent.CLICK, navClickHandler);			library_btn.addEventListener(MouseEvent.CLICK, navClickHandler);			next_btn.addEventListener(MouseEvent.CLICK, nextClickHandler);			next_btn.addEventListener(MouseEvent.ROLL_OVER, nextOverHandler);			createTimeline();		}private function createTimeline():void {			tl = new TimelineMax( {onComplete:playAgain} );			//color			tl.addLabel("color", tl.duration);			tl.append( TweenMax.fromTo( color_mc, 1, {x:600}, {x:endX, onComplete:tl.pause, immediateRender:true, onStart:updateCurrentSection }) ) ;			tl.append( TweenMax.to( color_mc, .2, {autoAlpha:0}) ) ;			//align			tl.addLabel("align", tl.duration);			tl.append( TweenMax.to( align_mc, 1,  { x:endX, onComplete:tl.pause, onStart:updateCurrentSection  } ) );			tl.append( TweenMax.to( align_mc, .2, { autoAlpha:0 } ) );			//transform			tl.addLabel("transform", tl.duration)			tl.append( TweenMax.to( transform_mc, 1, {y:endY, onComplete:tl.pause, onStart:updateCurrentSection   }) );			tl.append( TweenMax.to( transform_mc, .2, { autoAlpha:0 } ) );			//library			tl.insert( TweenMax.to( library_mc, 0, { x:endX, immediateRender:false } ), "library" );			tl.append( TweenMax.from( library_mc.img_mc, 1, { scrollRect:{bottom:0} , onStart:updateCurrentSection  } ) );			tl.append( TweenMax.from( library_mc.head_txt, .2, { x:"100", alpha:0} ) );			tl.append( TweenMax.from( library_mc.line_mc, .2, { alpha:0 }) ) ;			tl.append( TweenMax.from( library_mc.body_txt, .5, { y:"50", autoAlpha:0, onComplete:tl.pause  } ) );			tl.append( TweenMax.to( library_mc, .2, { autoAlpha:0 } ) );		}		private function nextClickHandler(e:MouseEvent):void{			tl.play();			}		private function nextOverHandler(e:MouseEvent):void{			if(tl.getLabelAfter() == null){				trace("next section is " + tl.getLabelAfter( -1 ));				}else{					trace("next section is " + tl.getLabelAfter(  ));					}			}		private function navClickHandler(e:MouseEvent):void{			tl.gotoAndPlay( e.target.label );			}		private function playAgain():void{			tl.restart();			}		private function updateCurrentSection(){			trace(tl.currentLabel);			}		private function initModelEventListeners():void{            _model.addEventListener(Model.TEST_EVENT, testEventHandler);        		}        private function creation (){            }       function testEventHandler(e:Event){       trace("test")       }	}}